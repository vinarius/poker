{"version":3,"sources":["interfaces/card.ts","components/StateProvider/stateActions.ts","services/shuffleDeck.ts","components/StateProvider/myReducer.ts","components/StateProvider/stateProvider.tsx","assets/Playing_Cards/2S.png","assets/Playing_Cards/2H.png","assets/Playing_Cards/2C.png","assets/Playing_Cards/2D.png","assets/Playing_Cards/3S.png","assets/Playing_Cards/3H.png","assets/Playing_Cards/3C.png","assets/Playing_Cards/3D.png","assets/Playing_Cards/4S.png","assets/Playing_Cards/4H.png","assets/Playing_Cards/4C.png","assets/Playing_Cards/4D.png","assets/Playing_Cards/5S.png","assets/Playing_Cards/5H.png","assets/Playing_Cards/5C.png","assets/Playing_Cards/5D.png","assets/Playing_Cards/6S.png","assets/Playing_Cards/6H.png","assets/Playing_Cards/6C.png","assets/Playing_Cards/6D.png","assets/Playing_Cards/7S.png","assets/Playing_Cards/7H.png","assets/Playing_Cards/7C.png","assets/Playing_Cards/7D.png","assets/Playing_Cards/8S.png","assets/Playing_Cards/8H.png","assets/Playing_Cards/8C.png","assets/Playing_Cards/8D.png","assets/Playing_Cards/9S.png","assets/Playing_Cards/9H.png","assets/Playing_Cards/9C.png","assets/Playing_Cards/9D.png","assets/Playing_Cards/10S.png","assets/Playing_Cards/10H.png","assets/Playing_Cards/10C.png","assets/Playing_Cards/10D.png","assets/Playing_Cards/JS.png","assets/Playing_Cards/JH.png","assets/Playing_Cards/JC.png","assets/Playing_Cards/JD.png","assets/Playing_Cards/QS.png","assets/Playing_Cards/QH.png","assets/Playing_Cards/QC.png","assets/Playing_Cards/QD.png","assets/Playing_Cards/KS.png","assets/Playing_Cards/KH.png","assets/Playing_Cards/KC.png","assets/Playing_Cards/KD.png","assets/Playing_Cards/AS.png","assets/Playing_Cards/AH.png","assets/Playing_Cards/AC.png","assets/Playing_Cards/AD.png","services/getImage.ts","components/Table/table.tsx","components/MainMenu/mainMenu.tsx","components/container.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Suit","FaceCardValue","NumericValue","convertToFaceCard","value","jack","queen","king","ace","newDeck","spades","hearts","clubs","diamonds","forEach","suit","i","newCard","push","shuffledDeck","shuffle","deck","randomCard","Math","floor","random","length","card","splice","state","action","type","stateActions","shuffleDeck","drawCard","enterGame","exitGame","updateChatInput","payload","updateChatHistory","ShuffleDeck","shift","inGame","newChatText","chatInput","newChatMessage","chatHistory","MyContext","createContext","StateProvider","props","defaultState","useReducer","myReducer","dispatch","providerValue","tableSize","newChatHistory","Provider","children","convertToCardImageString","toString","Error","getImage","cardValue","twoOfSpades","twoOfHearts","twoOfClubs","twoOfDiamonds","threeOfSpades","threeOfHearts","threeOfClubs","threeOfDiamonds","fourOfSpades","fourOfHearts","fourOfClubs","fourOfDiamonds","fiveOfSpades","fiveOfHearts","fiveOfClubs","fiveOfDiamonds","sixOfSpades","sixOfHearts","sixOfClubs","sixOfDiamonds","sevenOfSpades","sevenOfHearts","sevenOfClubs","sevenOfDiamonds","eightOfSpades","eightOfHearts","eightOfClubs","eightOfDiamonds","nineOfSpades","nineOfHearts","nineOfClubs","nineOfDiamonds","tenOfSpades","tenOfHearts","tenOfClubs","tenOfDiamonds","jackOfSpades","jackOfHearts","jackOfClubs","jackOfDiamonds","queenOfSpades","queenOfHearts","queenOfClubs","queenOfDiamonds","kingOfSpades","kingOfHearts","kingOfClubs","kingOfDiamonds","aceOfSpades","aceOfHearts","aceOfClubs","aceOfDiamonds","console","log","formatCashString","amount","cashValueSplit","split","stringConstructorArr","unshift","join","sliceChatString","string","splitStrings","slice","concat","remainder","reconstructChatLines","chatLines","joinedMessages","placeholderTest","line1","line2","lengthTest","Table","cardHeight","useContext","useState","isShowingChat","setIsShowingChat","myToast","useRef","showToast","severityValue","summaryValue","detailValue","current","show","severity","summary","detail","handleChatSubmit","event","preventDefault","element","document","getElementById","scrollTop","scrollHeight","updateChatScroll","convertChatMessageIntoMultiline","chatMessage","splitBySpaces","multilineChatMessage","line","slicedLine","condensedChatMessage","map","message","index","key","className","playerData","require","Items","chatBoxHistory","el","ref","playerCard1","playerCard2","formattedCashString","cash","name","alt","src","height","onClick","visible","position","onHide","title","id","onSubmit","onChange","target","e","MainMenu","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ae4a53d1.chunk.js","sourcesContent":["export interface ICard {\n    suit: Suit,\n    value: NumericValue | FaceCardValue,\n    isVisible: Boolean\n}\n\nexport enum Suit {\n    spades = 'spades',\n    hearts = 'hearts',\n    clubs = 'clubs',\n    diamonds = 'diamonds'\n}\n\nexport enum FaceCardValue {\n    jack = 'jack',\n    queen = 'queen',\n    king = 'king',\n    ace = 'ace'\n}\n\nexport enum NumericValue {\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9,\n    ten = 10\n}","const SHUFFLE_DECK = 'shuffleDeck';\nconst DRAW_CARD = 'drawCard';\nconst ENTER_GAME = 'enterGame';\nconst EXIT_GAME = 'exitGame';\nconst UPDATE_CHAT_INPUT = 'updateChatInput';\nconst UPDATE_CHAT_HISTORY = 'updateChatHistory';\n\nexport default {\n    DRAW_CARD,\n    SHUFFLE_DECK,\n    ENTER_GAME,\n    EXIT_GAME,\n    UPDATE_CHAT_INPUT,\n    UPDATE_CHAT_HISTORY\n};","import { ICard, Suit, FaceCardValue, NumericValue } from '../interfaces/card';\n\nconst convertToFaceCard = (value: number): FaceCardValue | NumericValue => {\n    switch(value) {\n        case 9:\n            return FaceCardValue.jack;\n        case 10:\n            return FaceCardValue.queen;\n        case 11:\n            return FaceCardValue.king;\n        case 12:\n            return FaceCardValue.ace;\n        default:\n            return value + 2;\n    }\n};\n\nexport default () => {\n    const newDeck: ICard[] = [];\n    const suits: Suit[] = [\n        Suit.spades,\n        Suit.hearts,\n        Suit.clubs,\n        Suit.diamonds\n    ];\n\n    suits.forEach((suit: Suit) => {\n        for (let i=0; i<13; i++) {\n            const newCard: ICard = {\n                suit,\n                value: convertToFaceCard(i)\n            };\n\n            newDeck.push(newCard);\n        }\n    });\n\n    const shuffledDeck: ICard[] = [];\n    const shuffle = (deck: ICard[]): void => {\n        const randomCard: number = Math.floor(Math.random() * deck.length);\n        const card: ICard = deck.splice(randomCard, 1)[0];\n        shuffledDeck.push(card);\n        if(deck.length > 0) shuffle(deck);\n    };\n\n    shuffle(newDeck);\n\n    return shuffledDeck;\n};","import { IState } from './../../interfaces/state';\nimport stateActions from './stateActions';\nimport ShuffleDeck from '../../services/shuffleDeck';\n\nexport default (state: IState, action: any) => {\n    switch(action.type) {\n        case stateActions.SHUFFLE_DECK:\n            return shuffleDeck(state);\n        case stateActions.DRAW_CARD:\n            return drawCard(state);\n        case stateActions.ENTER_GAME:\n            return enterGame(state);\n        case stateActions.EXIT_GAME:\n            return exitGame(state);\n        case stateActions.UPDATE_CHAT_INPUT:\n            return updateChatInput(state, action.payload);\n        case stateActions.UPDATE_CHAT_HISTORY:\n            return updateChatHistory(state, action.payload);\n        default:\n            return state;\n    }\n};\n\nconst shuffleDeck = (state: IState) => ({\n    ...state,\n    deck: ShuffleDeck()\n});\n\nconst drawCard = (state: IState) => ({\n    ...state,\n    deck: state.deck.shift()\n});\n\nconst enterGame = (state: IState) => ({\n    ...state,\n    inGame: true\n});\n\nconst exitGame = (state: IState) => ({\n    ...state,\n    inGame: false\n});\n\nconst updateChatInput = (state: IState, newChatText: string) => ({\n    ...state,\n    chatInput: newChatText\n});\n\nconst updateChatHistory = (state: IState, newChatMessage: string[]) => ({\n    ...state,\n    chatHistory: [...state.chatHistory, newChatMessage]\n});","import React, { createContext, useReducer } from 'react';\nimport myReducer from './myReducer';\nimport stateActions from './stateActions';\nimport ShuffleDeck from '../../services/shuffleDeck';\nimport { IState } from '../../interfaces/state';\n\nexport const MyContext = createContext({});\n\nexport const StateProvider = (props: any) => {\n\n    const defaultState: IState = {\n        inGame: true,\n        deck: ShuffleDeck(),\n        chatInput: '',\n        chatHistory: []\n    };\n\n    const [state, dispatch] = useReducer(myReducer, defaultState);\n\n    const shuffleDeck: ()=> void = () => {\n        dispatch({ type: stateActions.SHUFFLE_DECK });\n    };\n\n    const drawCard: ()=> void = () => {\n        dispatch({ type: stateActions.DRAW_CARD });\n    };\n\n    const enterGame: ()=> void = () => {\n        dispatch({ type: stateActions.ENTER_GAME });\n    };\n\n    const exitGame: ()=> void = () => {\n        dispatch({ type: stateActions.EXIT_GAME });\n    };\n\n    const updateChatInput: ()=> void = (newChatText: string) => {\n        dispatch({ type: stateActions.UPDATE_CHAT_INPUT, payload: newChatText });\n    };\n\n    const updateChatHistory: ()=> void = (newChatHistory: string[]) => {\n        dispatch({ type: stateActions.UPDATE_CHAT_HISTORY, payload: newChatHistory});\n    };\n\n    const {\n        inGame,\n        tableSize,\n        deck,\n        chatInput,\n        chatHistory\n    } = state;\n\n    const providerValue = {\n        inGame,\n        tableSize,\n        deck,\n        chatInput,\n        chatHistory,\n        shuffleDeck,\n        drawCard,\n        enterGame,\n        exitGame,\n        updateChatInput,\n        updateChatHistory\n    };\n\n    return (\n        <MyContext.Provider value={providerValue}>\n            {props.children}\n        </MyContext.Provider>\n    );\n};","export default __webpack_public_path__ + \"static/media/2S.b0efcac0.png\";","export default __webpack_public_path__ + \"static/media/2H.44b256f0.png\";","export default __webpack_public_path__ + \"static/media/2C.2fe3f08c.png\";","export default __webpack_public_path__ + \"static/media/2D.ee39c7dc.png\";","export default __webpack_public_path__ + \"static/media/3S.9c2eae6c.png\";","export default __webpack_public_path__ + \"static/media/3H.ec26afbd.png\";","export default __webpack_public_path__ + \"static/media/3C.740490f6.png\";","export default __webpack_public_path__ + \"static/media/3D.e8d502dd.png\";","export default __webpack_public_path__ + \"static/media/4S.8c4d9f8f.png\";","export default __webpack_public_path__ + \"static/media/4H.5c782cf1.png\";","export default __webpack_public_path__ + \"static/media/4C.03a77942.png\";","export default __webpack_public_path__ + \"static/media/4D.6198dfa5.png\";","export default __webpack_public_path__ + \"static/media/5S.a4fb9b31.png\";","export default __webpack_public_path__ + \"static/media/5H.89ec1438.png\";","export default __webpack_public_path__ + \"static/media/5C.558517b0.png\";","export default __webpack_public_path__ + \"static/media/5D.0eeb59f1.png\";","export default __webpack_public_path__ + \"static/media/6S.2a77a732.png\";","export default __webpack_public_path__ + \"static/media/6H.490e85cf.png\";","export default __webpack_public_path__ + \"static/media/6C.3620f833.png\";","export default __webpack_public_path__ + \"static/media/6D.d9bad49c.png\";","export default __webpack_public_path__ + \"static/media/7S.5275b8fb.png\";","export default __webpack_public_path__ + \"static/media/7H.e131e73a.png\";","export default __webpack_public_path__ + \"static/media/7C.14a56224.png\";","export default __webpack_public_path__ + \"static/media/7D.230fd8a6.png\";","export default __webpack_public_path__ + \"static/media/8S.2d48dd68.png\";","export default __webpack_public_path__ + \"static/media/8H.ebac5b45.png\";","export default __webpack_public_path__ + \"static/media/8C.a8bc06d1.png\";","export default __webpack_public_path__ + \"static/media/8D.f364d555.png\";","export default __webpack_public_path__ + \"static/media/9S.6b23955c.png\";","export default __webpack_public_path__ + \"static/media/9H.21b32cac.png\";","export default __webpack_public_path__ + \"static/media/9C.6965773f.png\";","export default __webpack_public_path__ + \"static/media/9D.a24056d5.png\";","export default __webpack_public_path__ + \"static/media/10S.b2e5f800.png\";","export default __webpack_public_path__ + \"static/media/10H.4c239d9d.png\";","export default __webpack_public_path__ + \"static/media/10C.9ed3d91b.png\";","export default __webpack_public_path__ + \"static/media/10D.7ae9eea7.png\";","export default __webpack_public_path__ + \"static/media/JS.47d62930.png\";","export default __webpack_public_path__ + \"static/media/JH.28c2c59f.png\";","export default __webpack_public_path__ + \"static/media/JC.81c29a17.png\";","export default __webpack_public_path__ + \"static/media/JD.66d734e6.png\";","export default __webpack_public_path__ + \"static/media/QS.6ff68c33.png\";","export default __webpack_public_path__ + \"static/media/QH.4bc634e4.png\";","export default __webpack_public_path__ + \"static/media/QC.7c55d850.png\";","export default __webpack_public_path__ + \"static/media/QD.028ad7d4.png\";","export default __webpack_public_path__ + \"static/media/KS.ee2a7f62.png\";","export default __webpack_public_path__ + \"static/media/KH.3f8b3697.png\";","export default __webpack_public_path__ + \"static/media/KC.789e8068.png\";","export default __webpack_public_path__ + \"static/media/KD.2e5ab483.png\";","export default __webpack_public_path__ + \"static/media/AS.4832a80a.png\";","export default __webpack_public_path__ + \"static/media/AH.cc5001d4.png\";","export default __webpack_public_path__ + \"static/media/AC.1048c60e.png\";","export default __webpack_public_path__ + \"static/media/AD.f3b345b1.png\";","import { ICard } from '../interfaces/card';\n\nimport twoOfSpades from '../assets/Playing_Cards/2S.png';\nimport twoOfHearts from '../assets/Playing_Cards/2H.png';\nimport twoOfClubs from '../assets/Playing_Cards/2C.png';\nimport twoOfDiamonds from '../assets/Playing_Cards/2D.png';\nimport threeOfSpades from '../assets/Playing_Cards/3S.png';\nimport threeOfHearts from '../assets/Playing_Cards/3H.png';\nimport threeOfClubs from '../assets/Playing_Cards/3C.png';\nimport threeOfDiamonds from '../assets/Playing_Cards/3D.png';\nimport fourOfSpades from '../assets/Playing_Cards/4S.png';\nimport fourOfHearts from '../assets/Playing_Cards/4H.png';\nimport fourOfClubs from '../assets/Playing_Cards/4C.png';\nimport fourOfDiamonds from '../assets/Playing_Cards/4D.png';\nimport fiveOfSpades from '../assets/Playing_Cards/5S.png';\nimport fiveOfHearts from '../assets/Playing_Cards/5H.png';\nimport fiveOfClubs from '../assets/Playing_Cards/5C.png';\nimport fiveOfDiamonds from '../assets/Playing_Cards/5D.png';\nimport sixOfSpades from '../assets/Playing_Cards/6S.png';\nimport sixOfHearts from '../assets/Playing_Cards/6H.png';\nimport sixOfClubs from '../assets/Playing_Cards/6C.png';\nimport sixOfDiamonds from '../assets/Playing_Cards/6D.png';\nimport sevenOfSpades from '../assets/Playing_Cards/7S.png';\nimport sevenOfHearts from '../assets/Playing_Cards/7H.png';\nimport sevenOfClubs from '../assets/Playing_Cards/7C.png';\nimport sevenOfDiamonds from '../assets/Playing_Cards/7D.png';\nimport eightOfSpades from '../assets/Playing_Cards/8S.png';\nimport eightOfHearts from '../assets/Playing_Cards/8H.png';\nimport eightOfClubs from '../assets/Playing_Cards/8C.png';\nimport eightOfDiamonds from '../assets/Playing_Cards/8D.png';\nimport nineOfSpades from '../assets/Playing_Cards/9S.png';\nimport nineOfHearts from '../assets/Playing_Cards/9H.png';\nimport nineOfClubs from '../assets/Playing_Cards/9C.png';\nimport nineOfDiamonds from '../assets/Playing_Cards/9D.png';\nimport tenOfSpades from '../assets/Playing_Cards/10S.png';\nimport tenOfHearts from '../assets/Playing_Cards/10H.png';\nimport tenOfClubs from '../assets/Playing_Cards/10C.png';\nimport tenOfDiamonds from '../assets/Playing_Cards/10D.png';\nimport jackOfSpades from '../assets/Playing_Cards/JS.png';\nimport jackOfHearts from '../assets/Playing_Cards/JH.png';\nimport jackOfClubs from '../assets/Playing_Cards/JC.png';\nimport jackOfDiamonds from '../assets/Playing_Cards/JD.png';\nimport queenOfSpades from '../assets/Playing_Cards/QS.png';\nimport queenOfHearts from '../assets/Playing_Cards/QH.png';\nimport queenOfClubs from '../assets/Playing_Cards/QC.png';\nimport queenOfDiamonds from '../assets/Playing_Cards/QD.png';\nimport kingOfSpades from '../assets/Playing_Cards/KS.png';\nimport kingOfHearts from '../assets/Playing_Cards/KH.png';\nimport kingOfClubs from '../assets/Playing_Cards/KC.png';\nimport kingOfDiamonds from '../assets/Playing_Cards/KD.png';\nimport aceOfSpades from '../assets/Playing_Cards/AS.png';\nimport aceOfHearts from '../assets/Playing_Cards/AH.png';\nimport aceOfClubs from '../assets/Playing_Cards/AC.png';\nimport aceOfDiamonds from '../assets/Playing_Cards/AD.png';\n\nexport function convertToCardImageString(card: ICard): string {\n    let value: string;\n    switch(card.value) {\n        case 'jack':\n            value = 'J';\n            break;\n        case 'queen':\n            value = 'Q';\n            break;\n        case 'king':\n            value = 'K';\n            break;\n        case 'ace':\n            value = 'A';\n            break;\n        default:\n            value = card.value.toString();\n            break;\n    }\n\n    let suit: string;\n    switch(card.suit) {\n        case 'spades':\n            suit = 'S';\n            break;\n        case 'hearts':\n            suit = 'H';\n            break;\n        case 'clubs':\n            suit = 'C';\n            break;\n        case 'diamonds':\n            suit = 'D';\n            break;\n        default:\n            throw new Error('invalid suit detected');\n    }\n\n    return `${value}${suit}`;\n};\n\nexport function getImage(cardValue: string): string {\n    switch(cardValue) {\n        case '2S':\n            return twoOfSpades;\n        case '2H':\n            return twoOfHearts;\n        case '2C':\n            return twoOfClubs;\n        case '2D':\n            return twoOfDiamonds;\n        case '3S':\n            return threeOfSpades;\n        case '3H':\n            return threeOfHearts;\n        case '3C':\n            return threeOfClubs;\n        case '3D':\n            return threeOfDiamonds;\n        case '4S':\n            return fourOfSpades;\n        case '4H':\n            return fourOfHearts;\n        case '4C':\n            return fourOfClubs;\n        case '4D':\n            return fourOfDiamonds;\n        case '5S':\n            return fiveOfSpades;\n        case '5H':\n            return fiveOfHearts;\n        case '5C':\n            return fiveOfClubs;\n        case '5D':\n            return fiveOfDiamonds;\n        case '6S':\n            return sixOfSpades;\n        case '6H':\n            return sixOfHearts;\n        case '6C':\n            return sixOfClubs;\n        case '6D':\n            return sixOfDiamonds;\n        case '7S':\n            return sevenOfSpades;\n        case '7H':\n            return sevenOfHearts;\n        case '7C':\n            return sevenOfClubs;\n        case '7D':\n            return sevenOfDiamonds;\n        case '8S':\n            return eightOfSpades;\n        case '8H':\n            return eightOfHearts;\n        case '8C':\n            return eightOfClubs;\n        case '8D':\n            return eightOfDiamonds;\n        case '9S':\n            return nineOfSpades;\n        case '9H':\n            return nineOfHearts;\n        case '9C':\n            return nineOfClubs;\n        case '9D':\n            return nineOfDiamonds;\n        case '10S':\n            return tenOfSpades;\n        case '10H':\n            return tenOfHearts;\n        case '10C':\n            return tenOfClubs;\n        case '10D':\n            return tenOfDiamonds;\n        case 'JS':\n            return jackOfSpades;\n        case 'JH':\n            return jackOfHearts;\n        case 'JC':\n            return jackOfClubs;\n        case 'JD':\n            return jackOfDiamonds;\n        case 'QS':\n            return queenOfSpades;\n        case 'QH':\n            return queenOfHearts;\n        case 'QC':\n            return queenOfClubs;\n        case 'QD':\n            return queenOfDiamonds;\n        case 'KS':\n            return kingOfSpades;\n        case 'KH':\n            return kingOfHearts;\n        case 'KC':\n            return kingOfClubs;\n        case 'KD':\n            return kingOfDiamonds;\n        case 'AS':\n            return aceOfSpades;\n        case 'AH':\n            return aceOfHearts;\n        case 'AC':\n            return aceOfClubs;\n        case 'AD':\n            return aceOfDiamonds;\n        default:\n            console.log('card value:', cardValue)\n            throw new Error('unknown card type, cannot get image');\n    }\n}\n\nexport function formatCashString(amount: number): string {\n    let cashValueSplit: string[] = amount.toString().split('');\n    const stringConstructorArr: string[] = [];\n\n    for(let i = cashValueSplit.length - 1; i >= 0; i--) {\n        if(stringConstructorArr.length % 3 === 0 && stringConstructorArr.length !== 0) stringConstructorArr.unshift(',');\n        stringConstructorArr.unshift(cashValueSplit[i]);\n    }\n\n    stringConstructorArr.unshift('$');\n\n    const result = stringConstructorArr.join('');\n\n    return result;\n}","import React, { FunctionComponent, useContext, useState, useRef, MutableRefObject, FormEvent } from 'react';\nimport './table.css';\nimport { MyContext } from '../StateProvider/stateProvider';\nimport {convertToCardImageString, getImage, formatCashString} from '../../services/getImage';\nimport { player } from '../../interfaces/player';\nimport { Sidebar } from 'primereact/sidebar';\nimport { Button } from 'primereact/button';\nimport { Toast, ToastMessage } from 'primereact/toast';\nimport { Card } from 'primereact/card';\nimport { InputText } from 'primereact/inputtext';\nimport { IState } from '../../interfaces/state';\nimport convertChatMessageIntoMultiline from '../../services/convertChatMessageIntoMultiline';\nimport { join } from 'path';\n\nfunction sliceChatString(string: string, splitStrings: string[] = []): string[] {\n    if(string.length < 25) {\n        splitStrings.push(string);\n        return splitStrings;\n    }\n\n    splitStrings.push(string.slice(0, 23).concat('-'));\n    const remainder:string = string.slice(23, string.length);\n    sliceChatString(remainder, splitStrings);\n\n    return splitStrings;\n}\n\nfunction reconstructChatLines(chatLines: string[], joinedMessages: string[] = [], placeholderTest?: string): string[] {\n    const line1: string = placeholderTest ?? chatLines.shift() ?? '';\n    const line2: string = chatLines.shift() ?? '';\n    const lengthTest: string = `${line1} ${line2}`;\n  \n    if(lengthTest.length < 24 && chatLines.length > 0) {\n      reconstructChatLines(chatLines, joinedMessages, lengthTest);\n    } else if(chatLines.length > 1) {\n      joinedMessages.push(line1);\n      chatLines.unshift(line2);\n      reconstructChatLines(chatLines, joinedMessages);\n    } else if(chatLines.length === 0) {\n      joinedMessages.push(line1);\n      joinedMessages.push(line2);\n    }\n  \n    return joinedMessages;\n  }\n\nexport const Table: FunctionComponent = () => {\n    const cardHeight: string = '60';\n\n    const {\n        deck,\n        shuffleDeck,\n        exitGame,\n        chatInput,\n        updateChatInput,\n        chatHistory,\n        updateChatHistory\n     } = useContext<any>(MyContext);\n    const [isShowingChat, setIsShowingChat] = useState<boolean>(false);\n    const myToast = useRef() as MutableRefObject<Toast>;\n    const showToast: Function = (\n        severityValue: ToastMessage['severity'],\n        summaryValue: ToastMessage['summary'],\n        detailValue: ToastMessage['detail']\n        ): void => {\n        myToast.current.show({\n            severity: severityValue,\n            summary: summaryValue,\n            detail: detailValue\n        });\n    }\n\n    const updateChatScroll = (): void => {\n        const element = document.getElementById('chat-box');\n        element!.scrollTop = element!.scrollHeight;\n    }\n\n    const handleChatSubmit = (event: FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        updateChatHistory(chatInput);\n        updateChatInput('');\n        updateChatScroll();\n    };\n\n    const convertChatMessageIntoMultiline: Function = (chatMessage: string): JSX.Element => {\n\n        const splitBySpaces: string[] = chatMessage.split(' ');\n        let multilineChatMessage: string[] = [];\n        \n        splitBySpaces.forEach((line: string) => {\n            if(line.length > 24) {\n                const slicedLongLine: string[] = sliceChatString(line);\n                slicedLongLine.forEach((slicedLine: string) => multilineChatMessage.push(slicedLine));\n            } else {\n                multilineChatMessage.push(line);\n            }\n        });\n\n        // Condense elements into a single line with < 24 characters. Otherwise, it creates new lines for each space.\n        const condensedChatMessage: string[] = reconstructChatLines(multilineChatMessage);\n    \n        return <div>\n            {condensedChatMessage.map((message: string, index: number) => {\n                return <p key={index} className='chat-message'>{message}</p>\n            })}\n        </div>;\n    };\n\n    const playerData: player[] = require('../../assets/playerData.json').Items;\n    \n    const chatBoxHistory: HTMLParagraphElement[] = chatHistory.map((el:string, index:number) => {\n        if(index > 100) return;\n        return el.length > 24\n        ? convertChatMessageIntoMultiline(el, index)\n        : <p key={index} className='chat-message'>{`User: ${el}`}</p>\n    });\n\n    return (\n        <div className='table'>\n            <main>\n                <Toast className='main-menu-toast' ref={myToast} />\n                <div className='flex-row'>\n                        {(() => {\n                            if(playerData[0]) {\n                                const playerCard1: string = getImage(convertToCardImageString(deck[0]));\n                                const playerCard2: string = getImage(convertToCardImageString(deck[7]));\n                                const formattedCashString: string = formatCashString(playerData[0].cash);\n\n                                return (\n                                    <div className='table-seat'>\n                                        <p>{playerData[0].name}</p>\n                                        <p>{formattedCashString}</p>\n                                        <div className='card-container'>\n                                            <img alt='playing card' className='card-image' src={playerCard1} height={cardHeight} />\n                                            <img alt='playing card' className='card-image' src={playerCard2} height={cardHeight} />\n                                        </div>\n                                    </div>\n                                )\n                            } else {\n                                return (\n                                    <div className='table-seat'>\n                                        <div className='empty-seat'></div>\n                                    </div>\n                                )\n                            }\n                    })()}\n                    {(() => {\n                            if(playerData[1]) {\n                                const playerCard1: string = getImage(convertToCardImageString(deck[1]));\n                                const playerCard2: string = getImage(convertToCardImageString(deck[8]));\n                                const formattedCashString: string = formatCashString(playerData[1].cash);\n                                \n                                return (\n                                    <div className='table-seat'>\n                                        <p>{playerData[1].name}</p>\n                                        <p>{formattedCashString}</p>\n                                        <div className='card-container'>\n                                            <img alt='playing card' className='card-image' src={playerCard1} height={cardHeight} />\n                                            <img alt='playing card' className='card-image' src={playerCard2} height={cardHeight} />\n                                        </div>\n                                    </div>\n                                )\n                            } else {\n                                return (\n                                    <div className='table-seat'>\n                                        <div className='empty-seat'></div>\n                                    </div>\n                                )\n                            }\n                    })()}\n                </div>\n                <div className='flex-row-center'>\n                    <div className='table-side-column'>\n                    {(() => {\n                            if(playerData[2]) {\n                                const playerCard1: string = getImage(convertToCardImageString(deck[2]));\n                                const playerCard2: string = getImage(convertToCardImageString(deck[9]));\n                                const formattedCashString: string = formatCashString(playerData[2].cash);\n                                \n                                return (\n                                    <div className='table-side-seat'>\n                                        <p>{playerData[2].name}</p>\n                                        <p>{formattedCashString}</p>\n                                        <div className='card-container'>\n                                            <img alt='playing card' className='card-image' src={playerCard1} height={cardHeight} />\n                                            <img alt='playing card' className='card-image' src={playerCard2} height={cardHeight} />\n                                        </div>\n                                    </div>\n                                )\n                            } else {\n                                return (\n                                    <div className='table-side-seat'>\n                                        <div className='empty-seat'></div>\n                                    </div>\n                                )\n                            }\n                    })()}\n                    {(() => {\n                        if(playerData[3]) {\n                            const playerCard1: string = getImage(convertToCardImageString(deck[3]));\n                            const playerCard2: string = getImage(convertToCardImageString(deck[10]));\n                            const formattedCashString: string = formatCashString(playerData[3].cash);\n                            \n                            return (\n                                <div className='table-side-seat'>\n                                    <p>{playerData[3].name}</p>\n                                    <p>{formattedCashString}</p>\n                                    <div className='card-container'>\n                                        <img alt='playing card' className='card-image' src={playerCard1} height={cardHeight} />\n                                        <img alt='playing card' className='card-image' src={playerCard2} height={cardHeight} />\n                                    </div>\n                                </div>\n                            )\n                        } else {\n                            return (\n                                <div className='table-side-seat'>\n                                        <div className='empty-seat'></div>\n                                    </div>\n                            )\n                        }\n                    })()}\n                    </div>\n                    <div className='table-center'>\n                        <div className='center-text-container'>\n                            <p>Pot</p>\n                            <p>$45,234.00</p>\n                            {/* <br></br>\n                            <button onClick={()=>{shuffleDeck()}}>Shuffle Deck</button> */}\n                        </div>\n                    </div>\n                    <div className='table-side-column'>\n                    {(() => {\n                            if(playerData[4]) {\n                                const playerCard1: string = getImage(convertToCardImageString(deck[4]));\n                                const playerCard2: string = getImage(convertToCardImageString(deck[11]));\n                                const formattedCashString: string = formatCashString(playerData[4].cash);\n                                \n                                return (\n                                    <div className='table-side-seat'>\n                                        <p>{playerData[4].name}</p>\n                                        <p>{formattedCashString}</p>\n                                        <div className='card-container'>\n                                            <img alt='playing card' className='card-image' src={playerCard1} height={cardHeight} />\n                                            <img alt='playing card' className='card-image' src={playerCard2} height={cardHeight} />\n                                        </div>\n                                    </div>\n                                )\n                            } else {\n                                return (\n                                    <div className='table-side-seat'>\n                                        <div className='empty-seat'></div>\n                                    </div>\n                                )\n                            }\n                    })()}\n                    {(() => {\n                        if(playerData[5]) {\n                            const playerCard1: string = getImage(convertToCardImageString(deck[5]));\n                            const playerCard2: string = getImage(convertToCardImageString(deck[12]));\n                            const formattedCashString: string = formatCashString(playerData[5].cash);\n                            \n                            return (\n                                <div className='table-side-seat'>\n                                    <p>{playerData[5].name}</p>\n                                    <p>{formattedCashString}</p>\n                                    <div className='card-container'>\n                                        <img alt='playing card' className='card-image' src={playerCard1} height={cardHeight} />\n                                        <img alt='playing card' className='card-image' src={playerCard2} height={cardHeight} />\n                                    </div>\n                                </div>\n                            )\n                        } else {\n                            return (\n                                <div className='table-side-seat'>\n                                    <div className='empty-seat'></div>\n                                </div>\n                            )\n                        }\n                    })()}\n                    </div>\n                </div>\n                <div className='flex-row'>\n                    <div className='card-container'>\n                        <img alt='playing card' src={getImage(convertToCardImageString(deck[14]))} className='river-card playing-card' height={cardHeight} />\n                        <img alt='playing card' src={getImage(convertToCardImageString(deck[15]))} className='river-card playing-card' height={cardHeight} />\n                        <img alt='playing card' src={getImage(convertToCardImageString(deck[16]))} className='river-card playing-card' height={cardHeight} />\n                        <img alt='playing card' src={getImage(convertToCardImageString(deck[17]))} className='river-card playing-card' height={cardHeight} />\n                        <img alt='playing card' src={getImage(convertToCardImageString(deck[18]))} className='river-card playing-card' height={cardHeight} />\n                    </div>\n                </div>\n                <div className='player-info-container'>\n                    <div className='display-flex'>\n                        <div className='padding-seven-half-top-px'>\n                            <img alt='playing card' src={getImage(convertToCardImageString(deck[6]))} className='playing-card' height={cardHeight} />\n                            <img alt='playing card' src={getImage(convertToCardImageString(deck[13]))} className='playing-card' height={cardHeight} />\n                        </div>\n                        <div className='padding-seven-half-top-px'>\n                            <div className=\"container-center-items\">\n                                <Button className='player-game-action-button' onClick={()=>{ showToast('info', 'info message', 'Check feature under construction :)') }}>Check</Button>\n                            </div>\n                            <div className=\"container-center-items\">\n                                <Button className='player-game-action-button' onClick={()=>{ showToast('info', 'info message', 'Bet feature under construction :)') }}>Bet</Button>\n                                <Button className='player-game-action-button' onClick={()=>{ showToast('info', 'info message', 'Fold feature under construction :)') }}>Fold</Button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='display-flex'>\n                        <div className='user-info'>\n                            <p>Mark:</p>\n                            <p>$15,277.00</p>\n                        </div>\n                        <div>\n                            <Sidebar className='player-game-sidebar-chat' visible={isShowingChat} position=\"right\" onHide={() => setIsShowingChat(false)}>\n                                <Card className='chat-card' title='Chat'>\n                                    <div id='chat-box'>\n                                        {chatBoxHistory}\n                                    </div>\n                                    <form onSubmit={(event)=>{ handleChatSubmit(event) }}>\n                                        <InputText className='chat-input-text' value={chatInput} onChange={(event) => { updateChatInput(event.target.value) }} />\n                                    </form>\n                                </Card>\n                            </Sidebar>\n                            \n                            <Button onClick={(e) => setIsShowingChat(true)} className='player-game-action-button'>Chat</Button>\n                            <Button onClick={()=>{exitGame()}} className='player-game-action-button'>Menu</Button>\n                        </div>\n                    </div>\n                </div>\n            </main>\n        </div>\n    );\n};","import React, { FunctionComponent, useContext, useRef, MutableRefObject } from 'react';\nimport { MyContext } from '../StateProvider/stateProvider';\nimport './mainMenu.css';\nimport { Button } from 'primereact/button';\nimport { Toast, ToastMessage } from 'primereact/toast';\n\nexport const MainMenu: FunctionComponent = () => {\n\n    const { enterGame } = useContext<any>(MyContext);\n\n    const myToast = useRef() as MutableRefObject<Toast>;\n    const showToast: Function = (\n        severityValue: ToastMessage['severity'],\n        summaryValue: ToastMessage['summary'],\n        detailValue: ToastMessage['detail']\n        ): void => {\n        myToast.current.show({\n            severity: severityValue,\n            summary: summaryValue,\n            detail: detailValue\n        });\n    }\n\n    return (\n        <div className='main-menu'>\n            <Toast className=\"main-menu-toast\" ref={myToast} />\n            <p className='title'>Vin's Poker App</p>\n            <Button className=\"main-menu-button\" onClick={()=>{enterGame()}}>Enter Game</Button>\n            <Button className=\"main-menu-button\" onClick={()=>{ showToast('info', 'info message', 'Friends feature under construction :)')} }>Friends</Button>\n            <Button className=\"main-menu-button\" onClick={()=>{ showToast('info', 'info message', 'Leaderboard feature under construction :)')} }>Leaderboard</Button>\n            <Button className=\"main-menu-button\" onClick={()=>{ showToast('info', 'info message', 'Settings feature under construction :)')} }>Settings</Button>\n        </div>\n    );\n};","import React, { FunctionComponent, useContext } from 'react';\nimport '../App.css';\nimport { MyContext } from './StateProvider/stateProvider';\nimport { Table } from './Table/table';\nimport { MainMenu } from './MainMenu/mainMenu';\n\nexport const Container: FunctionComponent = () => {\n\n    const { inGame } = useContext(MyContext);\n\n    return (\n        <div className='App'>\n            { inGame ? <Table /> : <MainMenu /> }\n        </div>\n    );\n};","import React from 'react';\nimport './reset.css';\nimport 'primereact/resources/themes/vela-green/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { StateProvider } from './components/StateProvider/stateProvider';\nimport { Container } from './components/container';\n\nfunction App() {\n\n  return (\n    <StateProvider>\n      <Container />\n    </StateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}